using System;
using TMPro;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.Rendering.Universal;
using UnityEngine.UIElements;
using System.Collections;

public class devCar : MonoBehaviour
{
    //movement
    public devWheel[] wheels;
    public int EnginePower = 10;
    public float speed;
    private Rigidbody rb;
    public float DownForceCoefficient = 0.5f;
    public float JumpHeight = 1.0F;

    private float facingDirection = 0;
    
    //powerups
    public KeyCode powerUpKey = KeyCode.Space; //powerup firing button
    
    private string pname = ""; // the player starting powerup
    
    public GameObject bulletMod; // the model to spawn when the bullet is fired
    public int bulletSpeed;
    public float spintime; //how long the player will spin when hit with a missile
    
    public GameObject HomingRocketMod;

    private Quaternion rotate; // just a variable to make the bullets spawn the right way

    private int ammo;
    


    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        rb = GetComponent<Rigidbody>();
    }

    // Update is called once per frame
    
    void Update()
    {
        Vector3 vel = rb.linearVelocity;
        speed = vel.magnitude;

        DownForce();

        //print facing direction
        FacingDirection();

        if (Input.GetKeyDown(KeyCode.W) || Input.GetKey(KeyCode.W))
        {
            Drive();
        }
        if (Input.GetKeyUp(KeyCode.W))
        {
            releaseDrive();
        }
        if (Input.GetKeyDown(KeyCode.S))
        {
            if (rb.linearVelocity.magnitude < 0.01)
            {
                Reverse();
            }
            else
            {
                Brake();
            }

        }
        if (Input.GetKeyUp(KeyCode.S))
        {
            releaseBrake();
        }
        if (Input.GetKeyDown(KeyCode.Space))
        {
            HandBrake();
        }
        if (Input.GetKeyUp(KeyCode.Space))
        {
            releaseHandBrake();
        }

        if (Input.GetKeyDown(KeyCode.A) | Input.GetKey(KeyCode.A))
        {
            Steer(-1);
        }
        if (Input.GetKeyUp(KeyCode.A) | Input.GetKeyUp(KeyCode.D))
        {
            Steer(0);
        }
        if (Input.GetKeyDown(KeyCode.D) | Input.GetKey(KeyCode.D))
        {
            Steer(1);
        }

        if (Input.GetKeyDown(KeyCode.Q))
        {
            Jump();
        }
        
        
        if (Input.GetKeyDown(powerUpKey))
        {
            if (pname == "bullets")
            {
                useBullets();
            }
            
            else if (pname == "SpeedBoost")
            {
                useSpeedBoost();
            }
            
            else if (pname == "HomingRocket")
            {
                useHomingRocket();
            }
        }
        
        
        
    }
    void FixedUpdate()
    {
 
    }

    public void Drive()
    {
        foreach (var wheel in wheels)
        {
            wheel.Accelerate(EnginePower);
        }
    }

    public void Reverse()
    {
        foreach(var wheel in wheels)
        {
            wheel.Accelerate(-EnginePower);
        }
    }

    public void HandBrake()
    {
        foreach (var wheel in wheels)
        {
            if (wheel.handBrake)
            {
                wheel.BrakeHard();
            }
        }
    }

    public void releaseHandBrake()
    {
        foreach (var wheel in wheels)
        {
            if (wheel.handBrake)
            {
                wheel.ReleaseBrake();
            }
        }
    }

    public void Brake()
    {
        foreach (var wheel in wheels)
        {
            wheel.Brake();
        }
    }
    public void releaseBrake()
    {
        foreach (var wheel in wheels)
        {
            wheel.ReleaseBrake();
        }
    }
    public void releaseDrive()
    {
        foreach (var wheel in wheels)
        {
            wheel.releaseGas();
        }
    }

    public void Steer(float steerInput)
    {
        foreach(var wheel in wheels)
        {
            wheel.Steer(steerInput);
        }
    }

    public void DownForce()
    {
        rb.AddForce(-transform.up * speed * DownForceCoefficient);
    }

    public void Jump()
    {
        rb.AddRelativeForce(transform.up * rb.mass * JumpHeight);
    }

    public void FacingDirection()
    {
        facingDirection = rb.transform.localRotation.y * Mathf.PI;
        Debug.Log(GetMotionHeading(rb.linearVelocity.x,rb.linearVelocity.z));

    }
    private float GetMotionHeading(float x, float z)
    {
        if(z == 0)
        {
           if (x > 0)
            {
                return Mathf.PI / 2;
            }
            else
            {
                return -1 * Mathf.PI / 2;
            }
        }
        float heading = Mathf.Asin(x / z);
        return heading;
    }
    
    
    private void OnTriggerEnter(Collider other) {
        if (other.CompareTag("SpeedDown"))
        {
            pname = "SpeedDown";
            SpeedDown();
        }
        
        if (other.CompareTag("MissileBody"))
        {
            
            
        }
        
        
        if (pname == "")
        {
            if (other.CompareTag("Bullets"))
            {
                pname = "bullets";
                ammo = 3;
            }

            if (other.CompareTag("SpeedBoost"))
            {
                pname = "SpeedBoost";
            }
            
            if (other.CompareTag("HomingRocket"))
            {
                pname = "HomingRocket";
            }
            
            
        }
    }

    private void useBullets()
    {
        rotate = transform.rotation * Quaternion.Euler(90, 0, 0);
        
        Instantiate(bulletMod, transform.position + transform.forward + transform.forward, rotate);
        
        ammo = ammo - 1;
        if (ammo == 0)
        {
            pname = "";
        }
    }
    
    
    private void useHomingRocket()
    {
        rotate = transform.rotation;
        Instantiate(HomingRocketMod, transform.position + transform.forward + transform.forward, rotate);
        

        pname = "";
    }
    

    private void useSpeedBoost()
    {
        pname = "";
        StartCoroutine(SpeedBoostCoroutine());

    }

    private IEnumerator SpeedBoostCoroutine() //co routine for the speed boost to make it last 3 seconds
    {
        speed = speed * 3f;
        yield return new WaitForSeconds(3f);
        speed = speed / 3f;
    }
    
    
    private void SpeedDown()
    {
        StartCoroutine(SpeedDownCoroutine());
        pname = "";

    }

    private IEnumerator SpeedDownCoroutine() //co routine for the speed dampener to make it last 3 seconds
    {
        speed = speed / 2f;
        yield return new WaitForSeconds(3f);
        speed = speed * 2f;
    }


    private IEnumerator HitByMissile() //runs when the car is hit by the missle *DO THIS ONE WILLIAM*
    {
        float timer = 0f;
        float spinspeed = 360f;

        while (timer < spintime)
        {
            transform.Rotate(0, spinspeed * Time.deltaTime, 0);
            
            timer += Time.deltaTime;
            yield return null;
        }
    }
}
